// Problem: Find Minimum Time to Reach Last Room II (LC 3342)
// Link: https://leetcode.com/problems/find-minimum-time-to-reach-last-room-ii/description/

class Solution {
public:
    bool chk(int i, int j, int n,int m){
        if(i>=n || j>=m || i<0 || j<0) return false;
        return true;
    }
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n=moveTime.size(),m=moveTime[0].size();
        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> dist;
        dist.push({0,{0,0}});
        vector<vector<int>> dp(n,vector<int>(m,INT_MAX));
        dp[0][0]=0;
        vector<int> x_dir={1,-1,0,0};
        vector<int> y_dir= {0,0,1,-1};
        while(!dist.empty()){
            int x=dist.top().second.first, y= dist.top().second.second;
            dist.pop();
            for(int i=0;i<4;i++){
                int new_x = x + x_dir[i], new_y = y + y_dir[i];
                if(chk(new_x,new_y,n,m)){
                    int diff = max(moveTime[new_x][new_y],dp[x][y])+1;
                    if(diff < dp[new_x][new_y]){
                        dp[new_x][new_y] = diff;
                        dist.push({diff, {new_x,new_y}});
                    }
                }
            }
        }
        return dp[n-1][m-1];
    }
};