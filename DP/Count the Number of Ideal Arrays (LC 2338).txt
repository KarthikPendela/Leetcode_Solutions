// Problem: Count the Number of Ideal Arrays (LC 2338)
// Link: https://leetcode.com/problems/count-the-number-of-ideal-arrays/description/

class Solution {
public:
    using ll=long long;
    int MOD = 1e9+7;

    void count_possibilities(int curr, int idx, int maxValue, vector<ll> &ops){
        ops[idx]+=1;
        for(int j=2;curr*j<=maxValue;j++){
            count_possibilities(curr*j, idx+1, maxValue, ops);
        }
    }

    int idealArrays(int n, int maxValue) {
        vector<vector<ll>> cnt(15,vector<ll>(10005,0));
        vector<vector<ll>> pre_sum(15,vector<ll>(10005,0));
        vector<ll> ops(15,0);

        // Pre-fill the 1st array
        for(int i=1;i<=10000;i++){
            cnt[1][i] = 1;
            pre_sum[1][i]=i;
        }

        // Filling up all the possibilities
        for(int i=2;i<=14;i++){
            for(int j=i;j<=10000;j++){
                cnt[i][j] = pre_sum[i-1][j-1];
                pre_sum[i][j] = cnt[i][j] + pre_sum[i][j-1];
                cnt[i][j] %= MOD;
                pre_sum[i][j] %= MOD;
            }
        }

        // Calculate the options based on length
        for(int i=1;i<=maxValue;i++){
            count_possibilities(i,1,maxValue,ops);
        }

        ll ans=0, poss;
        for(int i=1;i<=14;i++){
            poss = cnt[i][n] * ops[i];
            poss %=MOD;
            ans+=poss;
            ans %= MOD;
        }

        return ans;
    }
};